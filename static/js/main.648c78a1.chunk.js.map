{"version":3,"sources":["components/CharacterForm.js","components/InitiativeList.js","App.js","serviceWorker.js","index.js"],"names":["CharacterForm","_ref","handleSubmit","react_default","a","createElement","formik_esm","initialValues","name","initiative","onSubmit","render","props","type","placeholder","value","values","onChange","handleChange","InitiativeList","characters","turn","orderedInitiative","sort","b","map","character","index","style","backgroundColor","App","state","actions","_this","setState","Object","toConsumableArray","concat","resetForm","handleNextTurn","_this$state","nextTurn","length","_this$state2","this","Fragment","components_CharacterForm","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4PAsCeA,EAjCO,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,aAAH,OACpBC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,cAAe,CAAEC,KAAM,GAAIC,WAAY,IACvCC,SAAUR,EACVS,OAAQ,SAAAC,GAAK,OACXT,EAAAC,EAAAC,cAAA,QAAMK,SAAUE,EAAMV,cACpBC,EAAAC,EAAAC,cAAA,SACEQ,KAAK,OACLL,KAAK,OACLM,YAAY,OACZC,MAAOH,EAAMI,OAAOR,KACpBS,SAAUL,EAAMM,eAElBf,EAAAC,EAAAC,cAAA,SACEQ,KAAK,SACLL,KAAK,aACLM,YAAY,kBACZC,MAAOH,EAAMI,OAAOP,WACpBQ,SAAUL,EAAMM,eAElBf,EAAAC,EAAAC,cAAA,UAAQQ,KAAK,UAAb,YCtBO,SAASM,EAATlB,GAA8C,IAApBmB,EAAoBnB,EAApBmB,WAAYC,EAAQpB,EAARoB,KAC7CC,EAAoBF,EAAWG,KAAK,SAACnB,EAAGoB,GAAJ,OAAUA,EAAEf,WAAaL,EAAEK,aAErE,OACEN,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,0BAGHiB,EAAkBG,IAAI,SAACC,EAAWC,GAAZ,OACrBxB,EAAAC,EAAAC,cAAA,MAAIuB,MAAOP,IAASM,EAAQ,CAAEE,gBAAiB,QAAW,MACxD1B,EAAAC,EAAAC,cAAA,UAAKqB,EAAUlB,MACfL,EAAAC,EAAAC,cAAA,UAAKqB,EAAUjB,oBC4BVqB,6MAvCbC,MAAQ,CACNX,WAAY,GACZC,KAAM,KAGRnB,aAAe,SAACc,EAAQgB,GAAY,IAC1BZ,EAAea,EAAKF,MAApBX,WAERa,EAAKC,SAAS,CACZd,WAAWe,OAAAC,EAAA,EAAAD,CACNf,GADKiB,OAAA,CAER,CACE7B,KAAMQ,EAAOR,KACbC,WAAYO,EAAOP,gBAIzBuB,EAAQM,eAGVC,eAAiB,WAAM,IAAAC,EACQP,EAAKF,MAA1BX,EADaoB,EACbpB,WAAYC,EADCmB,EACDnB,KACdoB,EAAWrB,EAAWsB,OAAS,EAAIrB,EAAOA,EAAO,EAAI,EAC3DY,EAAKC,SAAS,CAAEb,KAAMoB,6EAGf,IAAAE,EACsBC,KAAKb,MAA1BX,EADDuB,EACCvB,WAAYC,EADbsB,EACatB,KAEpB,OACElB,EAAAC,EAAAC,cAACF,EAAAC,EAAMyC,SAAP,KACE1C,EAAAC,EAAAC,cAACyC,EAAD,CAAe5C,aAAc0C,KAAK1C,eAClCC,EAAAC,EAAAC,cAAA,UAAQ0C,QAASH,KAAKL,eAAgB1B,KAAK,UAA3C,QACAV,EAAAC,EAAAC,cAACc,EAAD,CAAgBC,WAAYA,EAAYC,KAAMA,YAlCpC2B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAAS3C,OAAOR,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.648c78a1.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Formik } from 'formik';\n\n\nconst CharacterForm = ({ handleSubmit }) => (\n  <Formik\n    initialValues={{ name: '', initiative: '' }}\n    onSubmit={handleSubmit}\n    render={props => (\n      <form onSubmit={props.handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Name\"\n          value={props.values.name}\n          onChange={props.handleChange}\n        />\n        <input\n          type=\"number\"\n          name=\"initiative\"\n          placeholder=\"Initiative roll\"\n          value={props.values.initiative}\n          onChange={props.handleChange}\n        />\n        <button type=\"submit\">add</button>\n      </form>\n    )}\n  />\n);\n\nCharacterForm.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  values: PropTypes.object.isRequired,\n};\n\n\nexport default CharacterForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function InitiativeList({ characters, turn }) {\n  const orderedInitiative = characters.sort((a, b) => b.initiative - a.initiative);\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Initiative</th>\n        </tr>\n      </thead>\n      {orderedInitiative.map((character, index) => (\n        <tr style={turn === index ? { backgroundColor: '#f0f' } : null}>\n          <td>{character.name}</td>\n          <td>{character.initiative}</td>\n        </tr>\n      ))}\n    </table>\n  );\n}\n\nInitiativeList.propTypes = {\n  characters: PropTypes.array.isRequired,\n  turn: PropTypes.number.isRequired,\n};\n","import React, { Component } from 'react';\n\nimport CharacterForm from './components/CharacterForm';\nimport InitiativeList from './components/InitiativeList';\n\nclass App extends Component {\n  state = {\n    characters: [],\n    turn: 0,\n  }\n\n  handleSubmit = (values, actions) => {\n    const { characters } = this.state;\n\n    this.setState({\n      characters: [\n        ...characters,\n        {\n          name: values.name,\n          initiative: values.initiative,\n        },\n      ],\n    });\n    actions.resetForm();\n  }\n\n  handleNextTurn = () => {\n    const { characters, turn } = this.state;\n    const nextTurn = characters.length - 1 > turn ? turn + 1 : 0;\n    this.setState({ turn: nextTurn });\n  }\n\n  render() {\n    const { characters, turn } = this.state;\n\n    return (\n      <React.Fragment>\n        <CharacterForm handleSubmit={this.handleSubmit} />\n        <button onClick={this.handleNextTurn} type=\"button\">next</button>\n        <InitiativeList characters={characters} turn={turn} />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}